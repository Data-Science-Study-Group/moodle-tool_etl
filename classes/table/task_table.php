<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Table to display a list of tasks.
 *
 * @package    tool_etl
 * @copyright  2017 Dmitrii Metelkin <dmitriim@catalyst-au.net>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace tool_etl\table;

use tool_etl\common\common_interface;
use tool_etl\task_interface;
use flexible_table;
use html_writer;
use moodle_url;

defined('MOODLE_INTERNAL') || die;

class task_table extends flexible_table {
    /**
     * Autogenerated id.
     *
     * @var int
     */
    private static $autoid = 0;

    /**
     * Constructor
     *
     * @param string|null $id To be used by the table.
     */
    public function __construct($id = null) {
        global $PAGE;

        $id = (is_null($id) ? self::$autoid++ : $id);
        parent::__construct('tool-etl-tasks-' . $id);
        $this->define_baseurl($PAGE->url);
        $this->set_attribute('class', 'generaltable admintable');

        $this->define_columns(array(
                'source',
                'target',
                'processor',
                'schedule',
                'enabled',
                'actions'
            )
        );
        $this->define_headers(array(
                'Source',
                'Target',
                'Processor',
                'Schedule',
                'Enabled',
                get_string('actions'),
            )
        );

        $this->setup();
    }

    /**
     * Sets the data of the table.
     *
     * @param array $tasks A list of tasks.
     */
    public function display(array $tasks) {
        foreach ($tasks as $task) {
            $this->display_task($task);
        }

        $this->finish_output();
    }

    /**
     * Display a single task.
     *
     * @param \tool_etl\task_interface $task A task object.
     */
    protected function display_task(task_interface $task) {
        if ($task->is_enabled()) {
            $class = '';
            $enabled = get_string('yes');
        } else {
            $class = 'dimmed_text';
            $enabled = get_string('no');
        }

        $this->add_data(array(
            $this->display_task_item($task->source),
            $this->display_task_item($task->target),
            $this->display_task_item($task->processor),
            '',
            $enabled,
            $this->create_action_buttons($task),
        ), $class);
    }

    /**
     * Render a single task item.
     *
     * @param \tool_etl\common\common_interface $item
     *
     * @return string
     */
    protected function display_task_item(common_interface $item) {
        $name = html_writer::start_tag('strong') . $item->get_name() . html_writer::end_tag('strong');
        $settings = $this->display_settings($item->get_settings_for_display());

        return $name . $settings;
    }

    /**
     * Render settings.
     *
     * @param array $settings
     *
     * @return string
     */
    protected function display_settings(array $settings) {
        $output = html_writer::empty_tag('br');

        foreach ($settings as $name => $value) {
            $output .= html_writer::div($name . ': ' . $value);

        }

        return $output;
    }

    /**
     * Create action buttons for the task row.
     *
     * @param \tool_etl\task_interface $task A task object.
     *
     * @return string
     * @throws \coding_exception
     */
    protected function create_action_buttons(task_interface $task) {
        global $OUTPUT;

        $buttons = '';


        // Enable/disable button.
        $action = 'show';
        $title = 'enable';

        if ($task->is_enabled()) {
            $action = 'hide';
            $title = 'disable';
        }

        $buttons .= html_writer::link(
            new moodle_url('/admin/tool/etl/status.php', array('id' => $task->id)),
            html_writer::empty_tag('img', [
                'src' => $OUTPUT->pix_url('t/' . $action),
                'alt' => get_string($title),
                'class' => 'iconsmall',
            ]),
            ['title' => get_string($title)]
        );

        // Edit button.
        $buttons .= html_writer::link(
            new moodle_url('/admin/tool/etl/index.php',  array('id' => $task->id)),
            html_writer::empty_tag('img', [
                'src' => $OUTPUT->pix_url('t/edit'),
                'alt' => get_string('edit'),
                'class' => 'iconsmall',
            ]),
            ['title' => get_string('edit')]
        );

        // Delete button.
        $buttons .= html_writer::link(
            new moodle_url('/admin/tool/etl/delete.php',  array('id' => $task->id)),
            html_writer::empty_tag('img', [
                'src' => $OUTPUT->pix_url('t/delete'),
                'alt' => get_string('delete'),
                'class' => 'iconsmall',
            ]),
            ['title' => get_string('delete')]
        );

        return html_writer::tag('nobr', $buttons);
    }

}
